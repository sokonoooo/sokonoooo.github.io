const words = [
  { word: "–ê–ª–≥–æ—Ä–∏—Ç–º", hint: "”®–≥”©–≥–¥–ª–∏–π–Ω –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞–ª—Ç—ã–≥ —à–∏–π–¥—ç—Ö–∏–π–Ω —Ç—É–ª–¥ –∞—à–∏–≥–ª–∞–¥–∞–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π –∂—É—Ä–∞–º." },
  { word: "–ë–∏–Ω–∞—Ä", hint: "2-—Ä—Ç—ã–Ω —Ç–æ–æ–ª–ª—ã–Ω —Å–∏—Å—Ç–µ–º" },
  { word: "–°“Ø–ª–∂—ç—ç", hint: "–û–ª–æ–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä, —Ç”©—Ö”©”©—Ä”©–º–∂–∏–π–≥ —Ö–æ–ª–±–æ–∂ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö —Å–∏—Å—Ç–µ–º." },
  { word: "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä", hint: "–ü—Ä–æ–≥—Ä–∞–º—ã–≥ –±–∏—á—Å—ç–Ω –∫–æ–¥–æ–æ—Å –º–∞—à–∏–Ω–¥ –æ–π–ª–≥–æ–º–∂—Ç–æ–π —Ö—ç–ª —Ä“Ø“Ø —Ö”©—Ä–≤“Ø“Ø–ª—ç–≥—á –ø—Ä–æ–≥—Ä–∞–º." },
  { word: "–î–µ–±–∞–≥", hint: "–ê–ª–¥–∞–∞ –æ–ª–∂ –∑–∞—Å–≤–∞—Ä–ª–∞—Ö “Ø–π–ª —è–≤—Ü." },
  { word: "–°–∏–Ω—Ç–∞–∫—Å", hint: "–ü—Ä–æ–≥—Ä–∞–º—á–ª–∞–ª—ã–Ω —Ö—ç–ª–Ω–∏–π –¥“Ø—Ä—ç–º, “Ø–≥—Å–∏–π–Ω —Ö–∞—Ä–∏–ª—Ü–∞–Ω —Ö–æ–ª–±–æ–æ." },
  { word: "–ü—Ä–æ–≥—Ä–∞–º–º—á–ª–∞–ª", hint: "–ö–æ–º–ø—å—é—Ç–µ—Ä–∏–π–≥ –∑–∞–∞–≤–∞—Ä–ª–∞—Ö —Ö—ç–ª –∞—à–∏–≥–ª–∞–Ω –∫–æ–¥ –±–∏—á–∏—Ö “Ø–π–ª —è–≤—Ü." },
  { word: "–§—É–Ω–∫—Ü", hint: "–ü—Ä–æ–≥—Ä–∞–º—á–ª–∞–ª–¥ —Ç–æ–¥–æ—Ä—Ö–æ–π “Ø“Ø—Ä—ç–≥ –≥“Ø–π—Ü—ç—Ç–≥—ç–¥—ç–≥ –±–∏–µ –¥–∞–∞—Å–∞–Ω —Ö—ç—Å—ç–≥." },
  { word: "–ü—Ä–æ–≥—Ä–∞–º–º", hint: "–ö–æ–º–ø—å—é—Ç–µ—Ä–∏–π–Ω “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞–≥ —É–¥–∏—Ä–¥–∞—Ö –∫–æ–¥—ã–Ω —Ü–æ–≥—Ü." },
  { word: "–¢”©—Ö”©”©—Ä”©–º–∂", hint: "–ö–æ–º–ø—å—é—Ç–µ—Ä–∏–π–Ω –±“Ø—Ö —Ñ–∏–∑–∏–∫ —ç–¥ –∞–Ω–≥–∏—É–¥." },
  { word: "–®–∏—Ñ—Ä–ª—ç–ª", hint: "–ú—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–º–≥–∞–∞–ª–∞—Ö –∑–æ—Ä–∏–ª–≥–æ–æ—Ä ”©”©—Ä—á–ª”©—Ö “Ø–π–ª —è–≤—Ü." },
  { word: "–ü–∏–∫—Å–µ–ª", hint: "–î–∏–∂–∏—Ç–∞–ª –¥“Ø—Ä—Å–∏–π–≥ –±“Ø—Ä–¥“Ø“Ø–ª–¥—ç–≥ –∂–∏–∂–∏–≥ —Ü—ç–≥." },
  { word: "–°–µ—Ä–≤–µ—Ä", hint: "–°“Ø–ª–∂—ç—ç–Ω–¥ —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω –±—É—Å–∞–¥ —Ç”©—Ö”©”©—Ä”©–º–∂“Ø“Ø–¥—ç–¥ “Ø–π–ª—á–∏–ª–¥—ç–≥ –∫–æ–º–ø—å—é—Ç–µ—Ä." },
  { word: "–ö–æ–¥", hint: "–ü—Ä–æ–≥—Ä–∞–º—ã–≥ –±–∏—á–∏—Ö—ç–¥ —Ö—ç—Ä—ç–≥–ª—ç–¥—ç–≥ –∑–∞–∞–≤–∞—Ä—á–∏–ª–≥–∞–∞." },
];

const maxWrong = 6;
let currentWord, guessedLetters, wrongGuesses;
let timer, timeLeft = 60;
let score = 0;

const wordDisplay = document.getElementById("wordDisplay");
const hintDiv = document.getElementById("hint");
const messageDiv = document.getElementById("resultMessage");
const letterButtons = document.getElementById("letterButtons");
const canvas = document.getElementById("hangmanCanvas");
const ctx = canvas.getContext("2d");
const scoreCount = document.getElementById("scoreCount");
const timerDisplay = document.getElementById("timer");


function drawGallows() {
  ctx.strokeStyle = "white";
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(10, 240); ctx.lineTo(150, 240);
  ctx.moveTo(40, 240); ctx.lineTo(40, 20);
  ctx.lineTo(120, 20); ctx.lineTo(120, 40);
  ctx.stroke();
}

function drawHangman(part) {
  ctx.strokeStyle = "white";
  ctx.lineWidth = 2;
  switch (part) {
    case 1:
      ctx.beginPath(); ctx.arc(120, 60, 20, 0, Math.PI * 2); ctx.stroke(); break; // –¢–æ–ª–≥–æ–π
    case 2:
      ctx.beginPath(); ctx.moveTo(120, 80); ctx.lineTo(120, 140); ctx.stroke(); break; // –ë–∏–µ
    case 3:
      ctx.beginPath(); ctx.moveTo(120, 100); ctx.lineTo(90, 120); ctx.stroke(); break;  // –ó“Ø“Ø–Ω –≥–∞—Ä
    case 4:
      ctx.beginPath(); ctx.moveTo(120, 100); ctx.lineTo(150, 120); ctx.stroke(); break; // –ë–∞—Ä—É—É–Ω –≥–∞—Ä
    case 5:
      ctx.beginPath(); ctx.moveTo(120, 140); ctx.lineTo(90, 180); ctx.stroke(); break;  // –ó“Ø“Ø–Ω —Ö”©–ª
    case 6:
      ctx.beginPath(); ctx.moveTo(120, 140); ctx.lineTo(150, 180); ctx.stroke(); break; // –ë–∞—Ä—É—É–Ω —Ö”©–ª
  }
}

function startGame() {
  // –®–∏–Ω—ç “Ø–≥ —Å–æ–Ω–≥–æ—Ö
  const random = words[Math.floor(Math.random() * words.length)];
  currentWord = random.word.toUpperCase();
  guessedLetters = [];
  wrongGuesses = 0;

  // –¢–æ–≤—á–ª—É—É—Ä—É—É–¥—ã–≥ –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö –±–∞ “Ø—Å–≥“Ø“Ø–¥ “Ø“Ø—Å–≥—ç—Ö
  letterButtons.innerHTML = "";
  for (let i = 1040; i <= 1071; i++) { // –ö–∏—Ä–∏–ª–ª “Ø—Å–≥“Ø“Ø–¥ (–ê-–Ø)
    const letter = String.fromCharCode(i);
    createLetterButton(letter);
  }
  ["”®", "“Æ"].forEach(extraLetter => createLetterButton(extraLetter));

  // –¢–æ–≥–ª–æ–æ–º—ã–Ω —Ç–µ–∫—Å—Ç, –∑—É—Ä–∞–≥ —à–∏–Ω—ç—á–ª—ç—Ö
  hintDiv.textContent = `–°–∞–Ω–∞–∞: ${random.hint}`;
  messageDiv.textContent = "";
  drawGallows();
  updateDisplay();

  // –¢–∞–π–º–µ—Ä—ã–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
  if (!timer) {
    timeLeft = 60;
    timerDisplay.textContent = `‚è± –¶–∞–≥: ${timeLeft}`;
    score = 0;
    updateScore();
    timer = setInterval(() => {
      timeLeft--;
      timerDisplay.textContent = `‚è± –¶–∞–≥: ${timeLeft}`;
      if (timeLeft <= 0) {
        clearInterval(timer);
        timer = null;
        endGame();
      }
    }, 1000);
  }
}

function createLetterButton(letter) {
  const btn = document.createElement("button");
  btn.textContent = letter;
  btn.onclick = () => handleGuess(letter, btn);
  letterButtons.appendChild(btn);
}


function updateDisplay() {
  wordDisplay.textContent = currentWord
    .split("")
    .map(l => guessedLetters.includes(l) ? l : "_")
    .join(" ");
}

function checkWin() {
  if (currentWord.split("").every(l => guessedLetters.includes(l))) {
    messageDiv.textContent = "üéâ –ó”©–≤!";
    disableAllButtons();
    score += currentWord.length;
    updateScore();
    setTimeout(() => {
      startGame();
    }, 1500);
  }
}

function disableAllButtons() {
  document.querySelectorAll("#letterButtons button").forEach(btn => btn.disabled = true);
}

function updateScore() {
  scoreCount.textContent = score;
}

function endGame() {
  messageDiv.textContent = `‚è∞ –¶–∞–≥ –¥—É—É—Å–ª–∞–∞!`;
  disableAllButtons();
  saveFinalScore(score);

  setTimeout(() => {
    window.location.href = "scoreboard.html";
  }, 1000);
}

// –Ø–ª–∞–≥–¥—Å–∞–Ω “Ø–µ–¥ —á –º”©–Ω scoreboard —Ä—É—É —à–∏–ª–∂“Ø“Ø–ª—ç—Ö—ç—ç—Ä –±–∏—á—Å—ç–Ω –±–∞–π—Ö
function handleGuess(letter, button) {
  button.disabled = true;
  if (currentWord.includes(letter)) {
    guessedLetters.push(letter);
    updateDisplay();
    checkWin();
  } else {
    wrongGuesses++;
    drawHangman(wrongGuesses);
    if (wrongGuesses === maxWrong) {
      messageDiv.textContent = `‚ùå –¢–∞ —è–ª–∞–≥–¥–ª–∞–∞! “Æ–≥: ${currentWord}`;
      disableAllButtons();
      saveFinalScore(score);
      setTimeout(() => {
        window.location.href = "scoreboard.html";
      }, 1000);
    }
  }
}


function getCookie(name) {
  const match = document.cookie.match(new RegExp("(^| )" + name + "=([^;]+)"));
  return match ? decodeURIComponent(match[2]) : null;
}

function saveFinalScore(score) {
  const nickname = getCookie("nickname") || "–¢–æ–≥–ª–æ–≥—á";
  if (typeof score !== "number" || isNaN(score)) {
    console.warn("–û–Ω–æ–æ –±—É—Ä—É—É –±–∞–π–Ω–∞:", score);
    return;
  }

  const newScore = { name: nickname, score: score };
  let scores = JSON.parse(localStorage.getItem("hangmanTopScores") || "[]");

  if (!Array.isArray(scores)) {
    scores = [];
  }

  scores.push(newScore);
  scores = scores.filter(s => s && typeof s.score === "number" && typeof s.name === "string");
  scores.sort((a, b) => b.score - a.score);
  scores = scores.slice(0, 10);

  localStorage.setItem("hangmanTopScores", JSON.stringify(scores));
  console.log("–®–∏–Ω—ç –æ–Ω–æ–æ —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞:", scores);
}


// –¢–æ–≥–ª–æ–æ–º —ç—Ö–ª“Ø“Ø–ª—ç—Ö
startGame();


